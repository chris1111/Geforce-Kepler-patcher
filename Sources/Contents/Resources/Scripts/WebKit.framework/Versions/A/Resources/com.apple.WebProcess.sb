











































(version 1)
(deny default (with partial-symbolication))
(allow system-audit file-read-metadata)







(allow mach-register (local-name-prefix ""))


(allow file-read*
    (require-all (file-mode #o0004)
    (require-any (subpath "/Library/Filesystems/NetFSPlugins")
    (subpath "/Library/Apple/System")
    (subpath "/Library/Preferences/Logging")

    (subpath "/System")
    (subpath "/private/var/db/dyld")
    (subpath "/private/var/db/timezone")
    (subpath "/usr/lib")
    (subpath "/usr/share"))))


(allow file-read*
    (require-all (file-mode #o0004)
    (subpath "/AppleInternal/Library/Preferences/Logging")
    (system-attribute apple-internal)))


(allow file-map-executable
    (subpath "/Library/Apple/System/Library/Frameworks")
    (subpath "/Library/Apple/System/Library/PrivateFrameworks")
    (subpath "/System/Library/Frameworks")
    (subpath "/System/Library/PrivateFrameworks")
    (subpath "/usr/lib")
    (subpath "/usr/local/lib/sanitizers")

    (subpath "/usr/appleinternal/lib/sanitizers"))

(allow file-read-metadata
    (literal "/etc")
    (literal "/tmp")
    (literal "/var")
    (literal "/private/etc/localtime"))



(allow file-read*
    (literal "/dev/autofs_nowait")
    (literal "/dev/random")
    (literal "/dev/urandom")
    (literal "/private/etc/master.passwd")
    (literal "/private/etc/passwd"))

(allow file-read*
       file-write-data
    (literal "/dev/null")
    (literal "/dev/zero"))

(allow file-read*
       file-write-data
       file-ioctl

    (with telemetry)

    (literal "/dev/dtracehelper"))


(allow file-write-create
    (require-all (prefix "/cores/")
        (vnode-type REGULAR-FILE)))


(allow ipc-posix-shm-read*
    (ipc-posix-name "apple.shm.notification_center")
    (ipc-posix-name-prefix "apple.cfprefs."))


(define (system-graphics)


    (allow user-preference-read
        (preference-domain "com.apple.opengl")
        (preference-domain "com.nvidia.OpenGL"))


    (allow mach-lookup

        (with telemetry)

        (global-name "com.apple.cvmsServ"))

    (allow file-read*
        (prefix "/private/var/db/CVMS/cvmsCodeSignObj"))



    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-connection "IOAccelerator")
            (with telemetry)
            (apply-message-filter
                (allow
                    iokit-async-external-method
                    iokit-external-method
                )
                (allow (with telemetry)
                    iokit-external-trap
                )
            )
        )


        (allow iokit-open
            (iokit-connection "IOAccelerator")
        )
    )
    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-registry-entry-class "IOAccelerationUserClient")
            (with telemetry)
            (apply-message-filter
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                    iokit-external-method
                )
            )
        )


        (allow iokit-open
            (iokit-registry-entry-class "IOAccelerationUserClient")
        )
    )
    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-registry-entry-class "IOSurfaceRootUserClient")
            (with telemetry)
            (apply-message-filter
                (allow
                    iokit-async-external-method
                    iokit-external-method
                )
                (allow (with telemetry)
                    iokit-external-trap
                )
            )
        )


        (allow iokit-open
            (iokit-registry-entry-class "IOSurfaceRootUserClient")
        )
    )
    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-registry-entry-class "IOSurfaceSendRight")
            (with telemetry)
            (apply-message-filter
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                    iokit-external-method
                )
            )
        )


        (allow iokit-open
            (iokit-registry-entry-class "IOSurfaceSendRight")
        )
    )
    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (require-all
                (extension "com.apple.webkit.extension.iokit")
                (iokit-registry-entry-class "AppleIntelMEUserClient")
            )
            (with telemetry)
            (apply-message-filter
                (allow
                    iokit-external-method
                )
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                )
            )
        )


        (allow iokit-open
            (require-all
                (extension "com.apple.webkit.extension.iokit")
                (iokit-registry-entry-class "AppleIntelMEUserClient")
            )
        )
    )



    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (require-all
                (extension "com.apple.webkit.extension.iokit")
                (iokit-registry-entry-class "AppleSNBFBUserClient")
            )
            (with telemetry)
            (apply-message-filter
                (allow
                    iokit-external-method
                )
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                )
            )
        )


        (allow iokit-open
            (require-all
                (extension "com.apple.webkit.extension.iokit")
                (iokit-registry-entry-class "AppleSNBFBUserClient")
            )
        )
    )



    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-registry-entry-class "AGPMClient")
            (with telemetry)
            (apply-message-filter
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                    iokit-external-method
                )
            )
        )


        (allow iokit-open
            (iokit-registry-entry-class "AGPMClient")
        )
    )
    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-registry-entry-class "AppleGraphicsControlClient")
            (with telemetry)
            (apply-message-filter
                (allow
                    iokit-async-external-method
                    iokit-external-method
                )
                (allow (with telemetry)
                    iokit-external-trap
                )
            )
        )


        (allow iokit-open
            (iokit-registry-entry-class "AppleGraphicsControlClient")
        )
    )
    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-registry-entry-class "AppleGraphicsPolicyClient")
            (with telemetry)
            (apply-message-filter
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                    iokit-external-method
                )
            )
        )


        (allow iokit-open
            (iokit-registry-entry-class "AppleGraphicsPolicyClient")
        )
    )


    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-registry-entry-class "AppleMGPUPowerControlClient")
            (with telemetry)
            (apply-message-filter
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                    iokit-external-method
                )
            )
        )


        (allow iokit-open
            (iokit-registry-entry-class "AppleMGPUPowerControlClient")
        )
    )


    (allow file-read*
        (subpath "/Library/GPUBundles"))


    (allow iokit-set-properties
        (require-all (iokit-connection "IODisplay")
        (require-any (iokit-property "brightness")
        (iokit-property "linear-brightness")
        (iokit-property "commit")
        (iokit-property "rgcs")
        (iokit-property "ggcs")
        (iokit-property "bgcs")))))






(deny process-info*)

(allow process-info-pidinfo
    (with report) (with telemetry))
(allow process-info-pidinfo (target self))



(allow process-info-setcontrol (target self))
(allow process-info-dirtycontrol (target self))

(allow process-codesigning-status*
    (with report) (with telemetry))
(allow process-codesigning-status* (target self))




(deny sysctl*)
(allow sysctl-read
    (sysctl-name
        "hw.byteorder"
        "hw.busfrequency_max"
        "hw.cpufamily"

        "hw.cputype"
        "hw.cputhreadtype"
        "hw.logicalcpu"
        "hw.machine"
        "hw.memsize"
        "hw.model"
        "hw.ncpu"
        "hw.physicalcpu"

        "hw.vectorunit"
        "kern.bootargs"

        "kern.hostname"
        "kern.maxfilesperproc"
        "kern.memorystatus_level"
        "kern.osproductversion"

        "kern.ostype"
        "kern.osversion"
        "kern.safeboot"
        "kern.version"
        "machdep.cpu.brand_string"
        "security.mac.sandbox.sentinel"
        "sysctl.name2oid"
        "kern.tcsm_enable"
        "kern.tcsm_available"
        "vm.footprint_suspend")
    (sysctl-name-regex #"^hw.(active|avail)cpu")
    (sysctl-name-regex #"^hw.(busfrequency|cachelinesize|cpufrequency(|_max)|pagesize|tbfrequency)(|_compat)")
    (sysctl-name-regex #"^hw.l.+cachesize")
    (sysctl-name-regex #"^hw.(logical|physical)cpu_max")
    (sysctl-name-regex #"^hw.optional\.")
    (sysctl-name-regex #"^kern.os(release|type|variant_status|version)")
    (sysctl-name-regex #"^net.routetable")
)

(allow sysctl-write
    (sysctl-name
        "kern.tcsm_enable"))

(deny iokit-get-properties)
(allow iokit-get-properties
    (iokit-property "AAPL,LCD-PowerState-ON")

    (iokit-property "AGCInfo")
    (iokit-property-regex #"^Accel(Caps|NativeDMARowByteAlignment)")
    (iokit-property-regex #"^(Accurate|Extended)MaxDigitizerPressureValue")
    (iokit-property-regex #"^(Activation|Animation)Thresholds")
    (iokit-property "ActuationSupported")
    (iokit-property "AllowDisplaySleep")
    (iokit-property "AlwaysNeedsVelocityCalculated")
    (iokit-property-regex #"Apple(GVAKeyDoesNotExist|IntelMEVABundleName)")
    (iokit-property-regex #"^AAPL,(DisplayPipe|OpenCLdisabled|IOGraphics_LER(|_RegTag_1|_RegTag_0|_Busy_2)|alias-policy|boot-display|display-alias|mux-switch-state|ndrv-dev|primary-display|slot-name)")
    (iokit-property-regex #"^ATY,(cbits|fb_(linebytes|offset|size)|intrev)")
    (iokit-property "ATY,DeviceName")

    (iokit-property "ATY,EFIDisplay")
    (iokit-property "ATY,FamilyName")

    (iokit-property "AVCSupported")
    (iokit-property "BacklightHandle")
    (iokit-property "BlockSize")
    (iokit-property-regex #"^CEA(ModeID|PixelRepetition)")
    (iokit-property "CFBundleIdentifier")
    (iokit-property "CFBundleIdentifierKernel")

    (iokit-property "CapsLockDelay")
    (iokit-property "CaseSensitive")
    (iokit-property "ConfigState")
    (iokit-property "DPLanes")
    (iokit-property "DPLinkBit")
    (iokit-property "DPLinkRate")
    (iokit-property "Description")
    (iokit-property "Development")
    (iokit-property-regex #"^Device( Characteristics|EqID)")
    (iokit-property "DisplayRouting")
    (iokit-property "Driver is Ready")
    (iokit-property "Ejectable")
    (iokit-property "EnableLPVP")
    (iokit-property "Encrypted")
    (iokit-property "Endianness")
    (iokit-property "Family ID")
    (iokit-property "ForceSupported")
    (iokit-property "Formats")
    (iokit-property "FramebufferEnabled")
    (iokit-property "FramebufferStarted")
    (iokit-property "GPUConfigurationVariable")
    (iokit-property "GPUDCCDisplayable")
    (iokit-property "GPUDebugNullClientMask")
    (iokit-property "GpuDebugPolicy")
    (iokit-property "GPURawCounterBundleName")
    (iokit-property "GPURawCounterPluginClassName")
    (iokit-property "HEVCSupported")
    (iokit-property "HIDPointerAccelerationType")
    (iokit-property "HwCtxCacheUpdate")
    (iokit-property-regex #"^IOAccel(DisplayPipeCapabilities|Index|Types|Revision)")
    (iokit-property-regex #"^IO(Class|MatchCategory|NameMatch)")
    (iokit-property-regex #"^IOAudioControl(ChannelID|ID|SubType|Usage|Value)")
    (iokit-property-regex #"^IOAudioDevice(CanBeDefaults|TransportType)")
    (iokit-property-regex #"^IOAudioEngine(ChannelNames|ClientDescription|CoreAudioPlugIn|(|Device)Description|Flavor|GlobalUniqueID|IsHidden|OutputChannelLayout|SampleOffset|State)")
    (iokit-property-regex #"^IOAudioEngineClock(Domain|IsStable)")
    (iokit-property "IOAudioEngineDisableClockBoundsCheck")
    (iokit-property-regex #"^IOAudioEngine(Input|Output)Sample(Latency|Offset)")
    (iokit-property-regex #"^IOAudioEngineNum(ActiveUserClients|SampleFramesPerBuffer)")
    (iokit-property "IOAudioSampleRate")
    (iokit-property "IOAudioStreamSampleFormatByteOrder")
    (iokit-property-regex #"^IOAV(.*)(De|En)code$")
    (iokit-property "IOBacklightHandlerID")
    (iokit-property "IOBusyInterest")
    (iokit-property "IOCFPlugInTypes")
    (iokit-property "IOChildIndex")
    (iokit-property-regex #"^IOClass(|NameOverride)")
    (iokit-property "IOConsoleUsers")
    (iokit-property "IODVDBundleName")
    (iokit-property "IODeviceMemory")
    (iokit-property "IODisplayParameters")
    (iokit-property-regex #"^IOFB(CLUTDefer|Config|CursorInfo|Dependent(ID|Index))")
    (iokit-property "IOFBCurrentPixelClock")
    (iokit-property-regex #"^IOFBCurrentPixelCount(|Real)")
    (iokit-property-regex #"^IOFB(DetailedTimings|Gamma(Count|HeaderSize|Width))")
    (iokit-property-regex #"^IOFB(Blue|Green|Red)GammaScale")
    (iokit-property-regex #"^IOFBI2CInterface(IDs|Info)")
    (iokit-property-regex #"^IOFB(HDMIDongleROM|Integrated|MemorySize|NeedsRefresh|ProbeOptions|ScalerInfo|TimingRange|Transform|UIScale|WaitCursor(Frames|Period))")
    (iokit-property "IOFramebufferOpenGLIndex")
    (iokit-property "IOGeneralInterest")
    (iokit-property "IOGLBundleName")
    (iokit-property-regex #"^IOGVA(BGRAEnc|Codec|EncoderRestricted|Scaler|VTCapabilities|HEVCDecodeCapabilities|HEVCEncodeCapabilities)")
    (iokit-property-regex #"^IOGVA(.*)(De|En)code$")
    (iokit-property "IOHibernateState")
    (iokit-property "IOI2CTransactionTypes")
    (iokit-property-regex #"^IOInterrupt(Controllers|Specifiers)")
    (iokit-property "IOKitDebug")
    (iokit-property "IOMatchCategory")
    (iokit-property "IOMediaIcon")
    (iokit-property "IONDRVFramebufferGeneration")
    (iokit-property "IONVRAMProperty")
    (iokit-property-regex #"^IOName(|Match(|ed))")
    (iokit-property "IOOCDBundleName")
    (iokit-property "IOPCITunnelled")
    (iokit-property "IOPCITunnelCompatible")
    (iokit-property "IOPMStrictTreeOrder")
    (iokit-property "IOParentMatch")
    (iokit-property-regex #"^IOPCI((Class|Primary|Property|)Match|Express(Capabilities|Link(Status|Capabilities))|MSIMode|Resourced|Tunnelled)")
    (iokit-property "IOPMIsPowerManaged")
    (iokit-property "IOPersonalityPublisher")
    (iokit-property-regex #"^IOPlatform(SerialNumber|UUID)")
    (iokit-property "IOPowerManagement")
    (iokit-property "IOProbeScore")
    (iokit-property "IOPropertyMatch")
    (iokit-property "IOProviderClass")
    (iokit-property-regex #"^IOReport(Lures|Legend(|Public))")
    (iokit-property "IOScreenRestoreState")
    (iokit-property "IOSourceVersion")
    (iokit-property-regex #"^IOVA(BundleName|Renderer(|Sub)ID)")
    (iokit-property-regex #"^InternalStatistics(|Accm)")
    (iokit-property-regex #"^MetalPlugin(Name|ClassName)")
    (iokit-property "MetalStatisticsName")
    (iokit-property "MTHIDDevice")
    (iokit-property "MT Built-In")
    (iokit-property "MaintainPowerInUILock")
    (iokit-property "Max Packet Size")
    (iokit-property "MinDigitizerPressureValue")
    (iokit-property "Multitouch Serial Number")
    (iokit-property-regex #"^Multitouch (Subdevice |)ID")
    (iokit-property "NVArch")
    (iokit-property-regex #"^NVC(AP|LASS)")
    (iokit-property-regex #"^NVDA,(Features|NVPresentment-version|accel-loaded|invalid-config|mm-version)")
    (iokit-property "NVDA,Enable-A2R10G10B10Format")
    (iokit-property-regex #"^NVDA(Type|initgl_created)")
    (iokit-property "NVRAMProperty")
    (iokit-property "NXSystemInfo")
    (iokit-property-regex #"^VRAM,(memvendorID|total(MB|size))")
    (iokit-property "NoAutoRoute")
    (iokit-property-regex #"^Num(Blocks|Streams)")
    (iokit-property-regex #"^PerformanceStatistics(|Accum)")
    (iokit-property "Protocol Characteristics")
    (iokit-property "Removable")
    (iokit-property-regex #"^ResetOn(Lock|Unlock)Ms")
    (iokit-property "SWIP_properties")
    (iokit-property "SafeEjectRequested")
    (iokit-property "SampleRates")
    (iokit-property "Serial Number")
    (iokit-property "StartupDisplay")
    (iokit-property "SurfaceList")
    (iokit-property-regex #"^Support(AudioAUUC|sSilentClick|TapToWake)")
    (iokit-property-regex #"^Sensor (Columns|Rows)")
    (iokit-property-regex #"^Sensor Region (Descriptor|Param|Rows)")
    (iokit-property-regex #"^Sensor Surface (Descriptor|Height|Width)")
    (iokit-property "SurfaceList")
    (iokit-property "TimeStampFiltering")
    (iokit-property "Transport")
    (iokit-property "USBADC")

    (iokit-property "UserClientEnabled")
    (iokit-property "VRAM,totalMB")
    (iokit-property "WANTS_FRAMES_IGNORED")
    (iokit-property-regex #"^acpi-(device|path)")
    (iokit-property "assigned-addresses")
    (iokit-property "attached-gpu-control-path")
    (iokit-property-regex #"^audio-(codec-info|device-mvalue|device-nvalue|selector)")
    (iokit-property "av-signal-type")
    (iokit-property "backlight-PWM-freq")
    (iokit-property "bcdVersion")
    (iokit-property-regex #"^(board|device|revision|subsystem|vendor)-id")
    (iokit-property "boot-gamma-restored")
    (iokit-property "built-in")
    (iokit-property "cail_properties")
    (iokit-property-regex #"^canvas-(height|width)")
    (iokit-property "class-code")
    (iokit-property "color-accuracy-index")
    (iokit-property "compatible")
    (iokit-property "connector-type")
    (iokit-property-regex #"^(device|revision|subsystem-vendor|touch-size)-id")
    (iokit-property "device_type")
    (iokit-property "display-bpc")
    (iokit-property "display-connect-flags")
    (iokit-property "display-link-component-bits")
    (iokit-property "display-pixel-component-bits")
    (iokit-property "display-type")
    (iokit-property "dpm")
    (iokit-property "errordb")

    (iokit-property "filevault-image")

    (iokit-property "graphic-options")
    (iokit-property "hda-gfx")
    (iokit-property-regex #"^id(Product|Vendor)")
    (iokit-property "iofb_version")
    (iokit-property "image-encrypted")
    (iokit-property "image-path")

    (iokit-property "locationID")

    (iokit-property "model")
    (iokit-property "mt-device-id")
    (iokit-property "name")
    (iokit-property "nv-stats")
    (iokit-property "od-server-name")

    (iokit-property-regex #"^parser-(options|type)")
    (iokit-property-regex #"^pci(-aspm-default|debug)")
    (iokit-property "port-number")
    (iokit-property "reg")
    (iokit-property "rm_board_number")
    (iokit-property-regex #"^(rom|vbios)-revision")
    (iokit-property "saved-config")
    (iokit-property "startup-timing")
    (iokit-property "touch-size-id")

    (iokit-property "ATY,cbits")
    (iokit-property "ATY,intrev")
    (iokit-property "AccelNativeDMARowByteAlignment")
    (iokit-property "CompactVRAM")
    (iokit-property "EnableBlitLib")
    (iokit-property "ForceDisableEDRAM")
    (iokit-property "GPUConfigurationVariable")
    (iokit-property "GpuDebugPolicy")
    (iokit-property "IOKitDebug")
    (iokit-property "IOPCIMatch")
    (iokit-property "IOOCDBundleName")
    (iokit-property "MetalStatisticsScriptName")
    (iokit-property "MetalCoalesce")
    (iokit-property "PanicOnGPUHang")
    (iokit-property "TelemetryDisable")
    (iokit-property "cail_properties")
    (iokit-property "dpm")

    (iokit-property "IOGVAH264EncodeCapabilities")


    (iokit-property "IOAVDHEVCDecodeCapabilities")


)


(if (equal? (param "CPU") "arm64")
    (allow iokit-get-properties
        (iokit-property "ADSSupported")
        (iokit-property "IOAVDHEVCDecodeCapabilities")
        (iokit-property "IOGLESBundleName")

        (iokit-property "MetalPluginClassName")

        (iokit-property "MetalPluginName")

        (iokit-property "IOSurfaceAcceleratorCapabilitiesDict")

        (iokit-property "acoustic-id")

    ))

(if (equal? (param "CPU") "arm64")
    (with-filter (iokit-registry-entry-class "IOService")
        (allow iokit-get-properties
            (iokit-property "IORegistryEntryPropertyKeys"))))

(if (equal? (param "CPU") "arm64")
    (with-filter (iokit-registry-entry-class "IOMobileFramebuffer")
        (allow iokit-get-properties
            (iokit-property "AppleTV"
                            "DisplayPipePlaneBaseAlignment"
                            "DisplayPipeStrideRequirements"
                            "dfr"
                            "external"
                            "hdcp-hoover-protocol"))))

(if (equal? (param "CPU") "arm64")
    (with-filter (iokit-registry-entry-class "IOPlatformDevice")
        (allow iokit-get-properties
            (iokit-property "soc-generation"))))

(if (equal? (param "CPU") "arm64")
    (with-filter (iokit-registry-entry-class "IOService")
        (allow iokit-get-properties
            (iokit-property "chip-id"
                            "display-rotation"
                            "display-scale"))))

(deny mach-lookup (xpc-service-name-prefix ""))

(allow mach-lookup

    (with report) (with telemetry)

    (xpc-service-name "com.apple.audio.SandboxHelper")
    (xpc-service-name "com.apple.hiservices-xpcservice")



)
(define (home-regex home-relative-regex)
  (regex (string-append "^" (regex-quote (param "HOME_DIR")) home-relative-regex)))

(define (home-subpath home-relative-subpath)
  (subpath (string-append (param "HOME_DIR") home-relative-subpath)))

(define (home-literal home-relative-literal)
  (literal (string-append (param "HOME_DIR") home-relative-literal)))

(define (allow-read-directory-and-issue-read-extensions path)
    (if path
        (begin
            (allow file-read* (subpath path))
            (allow file-issue-extension (require-all (extension-class "com.apple.app-sandbox.read") (subpath path))))))

(define (allow-read-write-directory-and-issue-read-write-extensions path)
    (if path
        (begin
            (allow file-read* file-write* (subpath path))
            (allow file-issue-extension (require-all (extension-class "com.apple.app-sandbox.read") (subpath path)))
            (allow file-issue-extension (require-all (extension-class "com.apple.app-sandbox.read-write") (subpath path))))))


(define (HEX-pattern-match-generator pattern-descriptor)
    (letrec ((pattern-string ""))
        (for-each (lambda (repeat-count)
            (if (zero? repeat-count)
                (set! pattern-string (string-append pattern-string "-"))
                (let appender ((count repeat-count))
                    (if (> count 0)
                        (begin
                            (set! pattern-string (string-append pattern-string "[0-9A-F]"))
                            (appender (- count 1)))))))
            pattern-descriptor)
    pattern-string))


(define (uuid-HEX-pattern-match-string)
    (HEX-pattern-match-generator '(8 0 4 0 4 0 4 0 12)))


(define *uuid-pattern* "")

(define (uuid-regex-string)
    (if (zero? (string-length *uuid-pattern*))
        (set! *uuid-pattern* (uuid-HEX-pattern-match-string)))
    *uuid-pattern*)


(allow file-read*


    (subpath "/Library/Dictionaries")
    (subpath "/Library/Fonts")
    (subpath "/Library/Frameworks")
    (subpath "/Library/Managed Preferences")
    (subpath "/Library/Speech/Synthesizers")
    (regex #"^/private/etc/(hosts|group|passwd)$")

    (literal "/Library/Application Support/CrashReporter/SubmitDiagInfo.domains")



    (home-literal "/.CFUserTextEncoding")



    (home-subpath "/Library/Fonts")

    (subpath "/Library/Audio/Plug-Ins/HAL")

    (home-subpath "/Library/Dictionaries"))

(allow file-read-data
    (literal "/usr/local/lib/log")



    (subpath "/Library/Audio/Plug-Ins/Components"))


(allow user-preference-read
    (preference-domain
        "kCFPreferencesAnyApplication"
        "com.apple.Accessibility"
        "com.apple.ATS"
        "com.apple.CoreGraphics"
        "com.apple.DownloadAssessment"
        "com.apple.HIToolbox"
        "com.apple.LaunchServices"
        "com.apple.MultitouchSupport"

        "com.apple.ServicesMenu.Services"

        "com.apple.ViewBridge"

        "com.apple.WebFoundation"
        "com.apple.avfoundation"
        "com.apple.avfoundation.frecents"

        "com.apple.avfoundation.videoperformancehud"

        "com.apple.coremedia"
        "com.apple.crypto"
        "com.apple.driver.AppleBluetoothMultitouch.mouse"
        "com.apple.driver.AppleBluetoothMultitouch.trackpad"
        "com.apple.driver.AppleHIDMouse"
        "com.apple.lookup.shared"
        "com.apple.mediaaccessibility"

        "com.apple.networkConnect"
        "com.apple.speech.voice.prefs"
        "com.apple.systemsound"
        "com.apple.universalaccess"
        "edu.mit.Kerberos"
        "pbs"

))


(allow file-read*
    (home-subpath "/Library/Preferences/.GlobalPreferences.plist")
    (home-subpath "/Library/Preferences/com.apple.security.plist")
    (home-subpath "/Library/Preferences/com.apple.Accessibility.plist")
    (home-subpath "/Library/Preferences/com.apple.ATS.plist")
    (home-subpath "/Library/Preferences/com.apple.CoreGraphics.plist")
    (home-subpath "/Library/Preferences/com.apple.DownloadAssessment.plist")
    (home-subpath "/Library/Preferences/com.apple.HIToolbox.plist")
    (home-subpath "/Library/Preferences/com.apple.LaunchServices.plist")
    (home-subpath "/Library/Preferences/com.apple.MultitouchSupport.plist")
    (home-subpath "/Library/Preferences/com.apple.ServicesMenu.Services.plist")
    (home-subpath "/Library/Preferences/com.apple.ViewBridge.plist")
    (home-subpath "/Library/Preferences/com.apple.WebKit.plist")
    (home-subpath "/Library/Preferences/com.apple.WebFoundation.plist")
    (home-subpath "/Library/Preferences/com.apple.avfoundation.plist")
    (home-subpath "/Library/Preferences/com.apple.avfoundation.frecents.plist")
    (home-subpath "/Library/Preferences/com.apple.avfoundation.videoperformancehud.plist")
    (home-subpath "/Library/Preferences/com.apple.coremedia.plist")
    (home-subpath "/Library/Preferences/com.apple.crypto.plist")
    (home-subpath "/Library/Preferences/com.apple.driver.AppleBluetoothMultitouch.mouse.plist")
    (home-subpath "/Library/Preferences/com.apple.driver.AppleBluetoothMultitouch.trackpad.plist")
    (home-subpath "/Library/Preferences/com.apple.driver.AppleHIDMouse.plist")
    (home-subpath "/Library/Preferences/com.apple.lookup.shared.plist")
    (home-subpath "/Library/Preferences/com.apple.mediaaccessibility.plist")
    (home-subpath "/Library/Preferences/com.apple.networkConnect.plist")
    (home-subpath "/Library/Preferences/com.apple.speech.voice.prefs.plist")
    (home-subpath "/Library/Preferences/com.apple.systemsound.plist")
    (home-subpath "/Library/Preferences/com.apple.universalaccess.plist")
    (home-subpath "/Library/Preferences/edu.mit.Kerberos.plist")
    (home-subpath "/Library/Preferences/pbs.plist")
)



(allow file-read*
    (literal "/Library/Preferences/com.apple.ViewBridge.plist"))


(allow file-read-data
    (literal "/Library/Preferences/com.apple.security.plist")
    (home-subpath "/Library/Preferences/com.apple.security.plist"))



(allow-read-directory-and-issue-read-extensions (param "WEBKIT2_FRAMEWORK_DIR"))



(allow-read-directory-and-issue-read-extensions "/System/Library/PrivateFrameworks/WebInspectorUI.framework")


(define (apply-read-and-issue-extension op path-filter)
    (op file-read* path-filter)
    (op file-issue-extension (require-all (extension-class "com.apple.app-sandbox.read") path-filter)))
(define (apply-write-and-issue-extension op path-filter)
    (op file-write* path-filter)
    (op file-issue-extension (require-all (extension-class "com.apple.app-sandbox.read-write") path-filter)))
(define (read-only-and-issue-extensions path-filter)
    (apply-read-and-issue-extension allow path-filter))
(define (read-write-and-issue-extensions path-filter)
    (apply-read-and-issue-extension allow path-filter)
    (apply-write-and-issue-extension allow path-filter))
(read-only-and-issue-extensions (extension "com.apple.app-sandbox.read"))
(read-write-and-issue-extensions (extension "com.apple.app-sandbox.read-write"))
(allow mach-lookup (extension "com.apple.app-sandbox.mach"))



(if (defined? 'mach-register)
    (allow mach-register

        (with telemetry)

        (global-name-regex #"^_oglprof_attach_<[0-9]+>$")))

(if (positive? (string-length (param "DARWIN_USER_CACHE_DIR")))
    (allow-read-write-directory-and-issue-read-write-extensions (param "DARWIN_USER_CACHE_DIR")))

(if (positive? (string-length (param "DARWIN_USER_TEMP_DIR")))
    (allow-read-write-directory-and-issue-read-write-extensions (param "DARWIN_USER_TEMP_DIR")))
(deny iokit-open
    (with send-signal SIGKILL)
    (iokit-user-client-class "AppleMultitouchDeviceUserClient")
    (iokit-user-client-class "IOHIDParamUserClient")
    (iokit-registry-entry-class "IOFramebufferSharedUserClient")
)


(if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
    (allow iokit-open
        (iokit-user-client-class "AppleUpstreamUserClient")
        (with telemetry)
        (apply-message-filter
            (allow (with telemetry)
                iokit-async-external-method
                iokit-external-trap
                iokit-external-method
            )
        )
    )


    (allow iokit-open
        (iokit-user-client-class "AppleUpstreamUserClient")
    )
)

(if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
    (allow iokit-open
        (require-all
            (extension "com.apple.webkit.extension.iokit")
            (iokit-user-client-class "RootDomainUserClient")

        )
        (with telemetry)
        (apply-message-filter
            (allow (with telemetry)
                iokit-async-external-method
                iokit-external-trap
                iokit-external-method
            )
        )
    )


    (allow iokit-open
        (require-all
            (extension "com.apple.webkit.extension.iokit")
            (iokit-user-client-class "RootDomainUserClient")

        )
    )
)


(if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
    (allow iokit-open
        (iokit-user-client-class "AudioAUUC")
        (with telemetry)
        (apply-message-filter
            (allow (with telemetry)
                iokit-async-external-method
                iokit-external-trap
                iokit-external-method
            )
        )
    )


    (allow iokit-open
        (iokit-user-client-class "AudioAUUC")
    )
)

(if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
    (allow iokit-open
        (iokit-user-client-class "IOAudioControlUserClient")
        (with telemetry)
        (apply-message-filter
            (allow (with telemetry)
                iokit-async-external-method
                iokit-external-trap
                iokit-external-method
            )
        )
    )


    (allow iokit-open
        (iokit-user-client-class "IOAudioControlUserClient")
    )
)

(if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
    (allow iokit-open
        (iokit-user-client-class "IOAudioEngineUserClient")
        (with telemetry)
        (apply-message-filter
            (allow (with telemetry)
                iokit-async-external-method
                iokit-external-trap
                iokit-external-method
            )
        )
    )


    (allow iokit-open
        (iokit-user-client-class "IOAudioEngineUserClient")
    )
)


(when (equal? (param "CPU") "arm64")
    (allow iokit-open

        (with telemetry)

        (iokit-user-client-class "IOMobileFramebufferUserClient")
        (iokit-user-client-class "IOSurfaceAcceleratorClient")

        (iokit-user-client-class "IOSurfaceRootUserClient")

    )
    (allow iokit-open
        (require-all
            (extension "com.apple.webkit.extension.iokit")
            (iokit-user-client-class "AppleAVDUserClient")
        )
    )
)



(allow ipc-posix-shm-read-data
    (ipc-posix-name "FNetwork.defaultStorageSession")
    (ipc-posix-name-regex #"\.PrivateBrowsing-")
    (ipc-posix-name-regex #"^WebKit Test-"))


(allow ipc-posix-shm-read* ipc-posix-shm-write-data
    (ipc-posix-name-regex #"^AudioIO"))


(allow mach-lookup

    (with report) (with telemetry)


    (global-name "com.apple.coreservices.launchservicesd")

    (global-name "com.apple.iconservices")
    (global-name "com.apple.iconservices.store")
    (global-name "com.apple.tccd.system")
    (global-name "com.apple.trustd.agent")
)
(allow mach-lookup



       (global-name "com.apple.logd")
       (global-name "com.apple.logd.events")

       (global-name "com.apple.CARenderServer")




)

(allow mach-lookup

    (with report) (with telemetry)






    (global-name "com.apple.fonts")
)


(deny mach-lookup (with telemetry)



    (global-name "com.apple.lsd.mapdb")
)



(allow mach-lookup

    (with telemetry)

    (xpc-service-name "com.apple.MTLCompilerService"))



(deny mach-lookup (with no-log)
    (global-name "com.apple.CoreServices.coreservicesd")
    (global-name "com.apple.DiskArbitration.diskarbitrationd")
    (global-name "com.apple.ViewBridgeAuxiliary")
    (global-name "com.apple.windowserver.active"))



(deny mach-lookup (with no-log)
    (global-name "com.apple.CoreDisplay.Notification"))
(allow file-read* (subpath "/private/var/db/mds/system"))

(allow file-write*
    (with report) (with telemetry)
    (subpath "/private/var/db/mds/system"))







(allow file-read*
       (subpath "/private/var/db/mds")
       (literal "/private/var/db/DetachedSignatures"))

(allow ipc-posix-shm-read* ipc-posix-shm-write-data ipc-posix-shm-write-create

       (with report) (with telemetry)

       (ipc-posix-name "com.apple.AppleDatabaseChanged"))
(allow mach-lookup

    (with telemetry)

    (global-name-regex #"^com.apple.distributed_notifications")
)

(allow file-read-data
    (literal "/dev/autofs_nowait"))

(allow ipc-posix-shm

    (with report) (with telemetry)

    (ipc-posix-name-regex #"^CFPBS:"))

(allow system-fsctl

    (with report) (with telemetry)

    (fsctl-command (_IO "h" 47)))


(system-graphics)


(allow network-outbound
       (literal "/private/var/run/syslog")



)


(allow file-read-data (path "/private/var/db/nsurlstoraged/dafsaData.bin"))



(allow mach-lookup

    (with report) (with telemetry)

    (global-name "com.apple.system.notification_center"))



(deny mach-lookup
    (global-name "com.apple.system.logger")
    (with no-report))

(if (defined? 'vnode-type)
        (deny file-write-create (vnode-type SYMLINK)))


(deny file-read-xattr file-write-xattr (xattr-regex #"^com\.apple\.security\.private\."))

(deny file-read* file-write* (with no-log)


       (home-literal "/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2")
       (home-literal "/Library/Preferences/com.apple.LaunchServices.QuarantineEventsV2-journal"))



(deny file-read* (with no-log)
       (subpath "/Library/InputManagers")
       (home-subpath "/Library/InputManagers"))
(deny user-preference-read (with no-log)
    (preference-domain "com.apple.speech.recognition.AppleSpeechRecognition.prefs"))
(deny mach-lookup (with no-log)
       (global-name "com.apple.coreservices.appleevents")
       (global-name "com.apple.pasteboard.1")
       (global-name "com.apple.speech.recognitionserver"))


(allow file-read*
       (subpath "/Library/Components")
       (subpath "/Library/Keyboard Layouts")
       (subpath "/Library/Input Methods")
       (home-subpath "/Library/Components")
       (home-subpath "/Library/Keyboard Layouts")
       (home-subpath "/Library/Input Methods"))



(allow file-read* (subpath "/private/var/db/datadetectors/sys"))



(if (not (defined? 'sbpl-filter?))
  (define (sbpl-filter? x)
      (and (list? x)
           (eq? (car x) 'filter))))

(macro (with-filter form)
   (let* ((ps (cdr form))
          (extra-filter (car ps))
          (rules (cdr ps)))
    `(letrec
        ((collect
             (lambda (l filters non-filters)
                 (if (null? l)
                     (list filters non-filters)
                     (let*
                         ((x (car l))
                          (rest (cdr l)))
                         (if (sbpl-filter? x)
                             (collect rest (cons x filters) non-filters)
                             (collect rest filters (cons x non-filters)))))))
         (inject-filter
             (lambda args
                 (let* ((collected (collect args '() '()))
                        (filters (car collected))
                        (non-filters (cadr collected)))
                 (if (null? filters)
                     (cons ,extra-filter non-filters)
                     (cons (require-all (apply require-any filters) ,extra-filter) non-filters)))))
         (orig-allow allow)
         (orig-deny deny)
         (wrapper
             (lambda (action)
                 (lambda args (apply action (apply inject-filter args))))))
        (set! allow (wrapper orig-allow))
        (set! deny (wrapper orig-deny))
        ,@rules
        (set! deny orig-deny)
        (set! allow orig-allow))))

(define (home-library-preferences-regex home-library-preferences-relative-regex)
    (regex (string-append "^" (regex-quote (param "HOME_LIBRARY_PREFERENCES_DIR")) home-library-preferences-relative-regex)))

(define (home-library-preferences-literal home-library-preferences-relative-literal)
    (literal (string-append (param "HOME_LIBRARY_PREFERENCES_DIR") home-library-preferences-relative-literal)))

(define (shared-preferences-read . domains)
  (for-each (lambda (domain)
              (begin
                (if (defined? `user-preference-read)
                    (allow user-preference-read (preference-domain domain)))


                (allow file-read*
                       (literal (string-append "/Library/Preferences/" domain ".plist"))
                       (home-library-preferences-literal (string-append "/" domain ".plist"))
                       (home-library-preferences-regex (string-append #"/ByHost/" (regex-quote domain) #"\..*\.plist$")))))
            domains))


(with-filter (extension "com.apple.webkit.camera")
    (shared-preferences-read "com.apple.coremedia")
    (allow file-read* (subpath "/Library/CoreMediaIO/Plug-Ins/DAL"))
    (allow mach-lookup (extension "com.apple.app-sandbox.mach"))
    (allow mach-lookup
        (global-name "com.apple.cmio.AppleCameraAssistant")


        (global-name "com.apple.cmio.VDCAssistant")
        (global-name "com.apple.cmio.AVCAssistant")
        (global-name "com.apple.cmio.IIDCVideoAssistant")


        (global-name "com.apple.IIDCAssistant")


        (require-all
            (extension "com.apple.webkit.extension.mach")
            (global-name "com.apple.applecamerad")
        ))


    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-user-client-class "IOUSBDeviceUserClientV2")
            (with telemetry)
            (apply-message-filter
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                    iokit-external-method
                )
            )
        )


        (allow iokit-open
            (iokit-user-client-class "IOUSBDeviceUserClientV2")
        )
    )

    (if (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES")
        (allow iokit-open
            (iokit-user-client-class "IOUSBInterfaceUserClientV2")
            (with telemetry)
            (apply-message-filter
                (allow (with telemetry)
                    iokit-async-external-method
                    iokit-external-trap
                    iokit-external-method
                )
            )
        )


        (allow iokit-open
            (iokit-user-client-class "IOUSBInterfaceUserClientV2")
        )
    )

    (allow device-camera))



(deny file-write*
    (home-subpath "/Library/Preferences/")
    (with no-log))

(deny mach-lookup (with no-log)
    (xpc-service-name "com.apple.audio.toolbox.reporting.service")
)


(deny mach-lookup (with telemetry)
    (global-name "com.apple.audio.SystemSoundServer-OSX")
    (global-name "com.apple.containermanagerd")
    (global-name "com.apple.cookied")
    (global-name "com.apple.coreservices.launchservicesd")
)


(allow mach-lookup
    (require-all
        (extension "com.apple.webkit.extension.mach")
        (global-name
            "com.apple.analyticsd"
            "com.apple.nehelper"

            "com.apple.nesessionmanager.content-filter"



            "com.apple.webinspector"
            "com.apple.cfprefsd.agent"
            "com.apple.cfprefsd.daemon"
            "com.apple.containermanagerd"
            "com.apple.coreservices.launchservicesd"
            "com.apple.diagnosticd"
            "com.apple.iconservices"
            "com.apple.iconservices.store"
            "com.apple.powerlog.plxpclogger.xpc"
            "com.apple.tccd"



            "com.apple.audio.AudioComponentRegistrar" "com.apple.audio.audiohald" "com.apple.coremedia.endpoint.xpc" "com.apple.coremedia.endpointstream.xpc"
            "com.apple.coremedia.endpointplaybacksession.xpc" "com.apple.coremedia.endpointremotecontrolsession.xpc" "com.apple.coremedia.routediscoverer.xpc"
            "com.apple.coremedia.routingcontext.xpc" "com.apple.coremedia.volumecontroller.xpc" "com.apple.lskdd" "com.apple.mediaremoted.xpc" "com.apple.trustd.agent"


        )
    )
)


(allow mach-lookup
    (with report)

    (with telemetry)

    (require-all
        (extension "com.apple.webkit.extension.mach")
        (global-name
            "com.apple.BluetoothServices"
        )
    )
)

(allow mach-lookup
    (require-all
        (extension "com.apple.webkit.extension.mach")
        (xpc-service-name


            "com.apple.accessibility.mediaaccessibilityd"
            "com.apple.audio.SandboxHelper"
            "com.apple.coremedia.videodecoder"
            "com.apple.coremedia.videoencoder"


        )
    )
)


(when (defined? 'file-ioctl)
    (deny file-ioctl (with telemetry))
    (allow file-ioctl (literal "/dev/dtracehelper"))
)

(when (defined? 'socket-ioctl)
    (deny socket-ioctl (with telemetry))
)

(when (defined? 'system-fcntl)
    (deny system-fcntl (with telemetry))
    (allow system-fcntl
        (fcntl-command F_BARRIERFSYNC)
        (fcntl-command F_GETCONFINED)
        (fcntl-command F_GETFL)

        (fcntl-command F_GETLK)
        (fcntl-command F_GETSIGSINFO)
        (fcntl-command F_NOCACHE)
        (fcntl-command F_OFD_GETLK)
        (fcntl-command F_OFD_SETLKWTIMEOUT)
        (fcntl-command F_RDADVISE)
        (fcntl-command F_SETCONFINED)
        (fcntl-command F_GETPATH)

        (fcntl-command F_ADDFILESIGS_RETURN)

        (fcntl-command F_CHECK_LV)

        (fcntl-command F_SPECULATIVE_READ)

        (fcntl-command F_SETFD)

        (fcntl-command F_GETFD)

        (fcntl-command F_RDADVISE)

        (fcntl-command F_NOCACHE)

        (fcntl-command F_SETFL)

        (fcntl-command F_SETNOSIGPIPE))


    (allow system-fcntl (with telemetry-backtrace)
        (fcntl-command F_OFD_SETLK))

    (allow system-fcntl
        (fcntl-command F_GETPROTECTIONCLASS))
)

(when (defined? 'process-codesigning*)


    (deny process-codesigning-text-offset-get (with telemetry))
    (deny process-codesigning-cdhash-get (with telemetry))
    (deny process-codesigning-blob-get (with telemetry))
    (deny process-codesigning-teamid-get (with telemetry))
    (allow process-codesigning-identity-get (with telemetry))

    (allow process-codesigning-entitlements-blob-get)

    (allow process-codesigning-status-get)

    (allow process-codesigning-status-set (target self))
    (deny process-info-codesignature (with no-report))

)

(when (defined? 'socket-option-get)


    (deny socket-option-get (with telemetry))
    (allow socket-option-get
        (require-all
            (socket-option-level SOL_SOCKET)
            (socket-option-name SO_ERROR)))

)

(when (defined? 'socket-option-set)


    (deny socket-option-set (with telemetry))
)


(when (defined? 'syscall-unix)
    (deny syscall-unix (with send-signal SIGKILL))
    (allow syscall-unix
        (syscall-number SYS_abort_with_payload)
        (syscall-number SYS_exit)
        (syscall-number SYS_read)
        (syscall-number SYS_write)
        (syscall-number SYS_open)
        (syscall-number SYS_close)
        (syscall-number SYS_unlink)
        (syscall-number SYS_chmod)
        (syscall-number SYS_chmod_extended)
        (syscall-number SYS_getuid)
        (syscall-number SYS_geteuid)
        (syscall-number SYS_recvfrom)
        (syscall-number SYS_getpeername)
        (syscall-number SYS_access)
        (syscall-number SYS_dup)
        (syscall-number SYS_pipe)
        (syscall-number SYS_getegid)
        (syscall-number SYS_getgid)
        (syscall-number SYS_sigprocmask)
        (syscall-number SYS_sigaltstack)
        (syscall-number SYS_ioctl)
        (syscall-number SYS_readlink)
        (syscall-number SYS_umask)
        (syscall-number SYS_msync)
        (syscall-number SYS_munmap)
        (syscall-number SYS_mprotect)
        (syscall-number SYS_madvise)
        (syscall-number SYS_mincore)
        (syscall-number SYS_fcntl)
        (syscall-number SYS_select)
        (syscall-number SYS_fsync)
        (syscall-number SYS_setpriority)
        (syscall-number SYS_socket)
        (syscall-number SYS_connect)
        (syscall-number SYS_setsockopt)
        (syscall-number SYS_gettimeofday)
        (syscall-number SYS_getrusage)
        (syscall-number SYS_getsockopt)
        (syscall-number SYS_writev)
        (syscall-number SYS_fchmod)
        (syscall-number SYS_rename)
        (syscall-number SYS_flock)
        (syscall-number SYS_sendto)
        (syscall-number SYS_shutdown)
        (syscall-number SYS_socketpair)
        (syscall-number SYS_mkdir)
        (syscall-number SYS_rmdir)
        (syscall-number SYS_pread)
        (syscall-number SYS_pwrite)
        (syscall-number SYS_csops)
        (syscall-number SYS_csops_audittoken)
        (syscall-number SYS_kdebug_trace64)
        (syscall-number SYS_kdebug_trace)
        (syscall-number SYS_sigaction)
        (syscall-number SYS_sigreturn)
        (syscall-number SYS_pathconf)
        (syscall-number SYS_getrlimit)
        (syscall-number SYS_setrlimit)
        (syscall-number SYS_mmap)
        (syscall-number SYS_lseek)
        (syscall-number SYS_ftruncate)
        (syscall-number SYS_sysctl)
        (syscall-number SYS_mlock)
        (syscall-number SYS_munlock)
        (syscall-number SYS_getattrlist)
        (syscall-number SYS_getxattr)
        (syscall-number SYS_fgetxattr)
        (syscall-number SYS_listxattr)
        (syscall-number SYS_shm_open)
        (syscall-number SYS_sem_wait)
        (syscall-number SYS_sem_post)
        (syscall-number SYS_sysctlbyname)
        (syscall-number SYS_psynch_mutexwait)
        (syscall-number SYS_psynch_mutexdrop)
        (syscall-number SYS_psynch_cvbroad)
        (syscall-number SYS_psynch_cvsignal)
        (syscall-number SYS_psynch_cvwait)
        (syscall-number SYS_psynch_rw_wrlock)
        (syscall-number SYS_psynch_rw_unlock)
        (syscall-number SYS_psynch_cvclrprepost)
        (syscall-number SYS_process_policy)
        (syscall-number SYS_issetugid)
        (syscall-number SYS___pthread_kill)
        (syscall-number SYS___pthread_markcancel)
        (syscall-number SYS___pthread_sigmask)
        (syscall-number SYS___disable_threadsignal)
        (syscall-number SYS___semwait_signal)
        (syscall-number SYS___semwait_signal_nocancel)
        (syscall-number SYS_proc_info)
        (syscall-number SYS_stat64)
        (syscall-number SYS_fstat64)
        (syscall-number SYS_lstat64)
        (syscall-number SYS_getdirentries64)
        (syscall-number SYS_statfs64)
        (syscall-number SYS_fstatfs64)
        (syscall-number SYS_getfsstat64)
        (syscall-number SYS_getaudit_addr)
        (syscall-number SYS_bsdthread_create)
        (syscall-number SYS_bsdthread_terminate)
        (syscall-number SYS_workq_kernreturn)
        (syscall-number SYS_thread_selfid)
        (syscall-number SYS_kevent)
        (syscall-number SYS_kevent_qos)
        (syscall-number SYS_kevent_id)
        (syscall-number SYS___mac_syscall)
        (syscall-number SYS_read_nocancel)
        (syscall-number SYS_write_nocancel)
        (syscall-number SYS_open_nocancel)
        (syscall-number SYS_close_nocancel)
        (syscall-number SYS_sendmsg_nocancel)
        (syscall-number SYS_recvfrom_nocancel)
        (syscall-number SYS_fcntl_nocancel)
        (syscall-number SYS_select_nocancel)
        (syscall-number SYS_connect_nocancel)
        (syscall-number SYS_sendto_nocancel)
        (syscall-number SYS_fsgetpath)
        (syscall-number SYS_fileport_makeport)
        (syscall-number SYS_guarded_open_np)
        (syscall-number SYS_guarded_close_np)
        (syscall-number SYS_guarded_write_np)
        (syscall-number SYS_change_fdguard_np)
        (syscall-number SYS_proc_rlimit_control)
        (syscall-number SYS_connectx)
        (syscall-number SYS_getattrlistbulk)
        (syscall-number SYS_openat)
        (syscall-number SYS_openat_nocancel)
        (syscall-number SYS_fstatat64)
        (syscall-number SYS_mkdirat)
        (syscall-number SYS_bsdthread_ctl)
        (syscall-number SYS_csrctl)
        (syscall-number SYS_guarded_pwrite_np)
        (syscall-number SYS_getentropy)
        (syscall-number SYS_necp_open)
        (syscall-number SYS_necp_client_action)
        (syscall-number SYS_ulock_wait)
        (syscall-number SYS_ulock_wake)
        (syscall-number SYS_work_interval_ctl)
        (syscall-number SYS_kdebug_typefilter)
        (syscall-number SYS_gettid)

        (syscall-number SYS_memorystatus_control)

        (syscall-number SYS_kdebug_trace_string)

        (syscall-number SYS_psynch_rw_rdlock)

        (syscall-number SYS_terminate_with_payload)

        (syscall-number SYS_quotactl)

        (syscall-number SYS_stat64_extended)

        (syscall-number SYS_lstat_extended)
        (syscall-number SYS_lstat64_extended)
        (syscall-number SYS_fgetattrlist)

        (syscall-number SYS_kqueue)

        (syscall-number SYS_kqueue_workloop_ctl)

        (syscall-number SYS_faccessat)

        (syscall-number SYS_fsetxattr)


        (syscall-number SYS_ulock_wait2)


        (syscall-number SYS_fstat64_extended)

        (syscall-number SYS_gethostuuid)
        (syscall-number SYS_setattrlist)

    )

    (if (equal? (param "CPU") "arm64")
        (allow syscall-unix
            (syscall-number SYS_fileport_makefd)
            (syscall-number SYS_guarded_open_dprotected_np)

            (syscall-number SYS_mremap_encrypted)
        )
    )


    (if (defined? 'SYS_objc_bp_assist_cfg_np)
        (allow syscall-unix (syscall-number SYS_objc_bp_assist_cfg_np)))

)




(if (equal? (param "CPU") "arm64")
    (with-filter (extension "com.apple.webkit.camera")
        (allow mach-lookup
            (require-all
                (extension "com.apple.webkit.extension.mach")
                (global-name "com.apple.appleh13camerad")
            ))))



(if (and (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES") (defined? 'mach-bootstrap))
    (allow mach-bootstrap
        (apply-message-filter
            (deny xpc-message-send (with telemetry))
            (allow xpc-message-send (message-number
                204
                207
                301
                711
                800
                804
                )
            )
        )
    )
)

(if (and (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES") (defined? 'mach-kernel-endpoint))
    (allow mach-kernel-endpoint
        (apply-message-filter
            (deny mach-message-send (with telemetry))
            (allow mach-message-send (kernel-mig-routine
                _mach_make_memory_entry
                clock_get_time
                host_get_io_master
                host_info
                host_request_notification
                io_connect_add_client
                io_connect_async_method
                io_connect_map_memory_into_task
                io_connect_method
                io_connect_method_var_output
                io_connect_set_notification_port_64
                io_iterator_is_valid
                io_iterator_next
                io_object_conforms_to
                io_registry_create_iterator
                io_registry_entry_create_iterator
                io_registry_entry_from_path
                io_registry_entry_get_child_iterator
                io_registry_entry_get_name
                io_registry_entry_get_name_in_plane
                io_registry_entry_get_parent_iterator
                io_registry_entry_get_properties_bin_buf
                io_registry_entry_get_property_bin_buf
                io_registry_entry_get_property_bytes
                io_registry_entry_get_registry_entry_id
                io_registry_get_root_entry
                io_server_version
                io_service_add_interest_notification_64
                io_service_add_notification_bin_64
                io_service_close
                io_service_get_matching_service_bin
                io_service_get_matching_services_bin
                io_service_open_extended
                mach_exception_raise
                mach_port_get_context_from_user
                mach_port_get_refs
                mach_port_request_notification
                mach_port_set_attributes
                mach_vm_copy
                mach_vm_map_external
                mach_vm_region
                mach_vm_region_recurse
                mach_vm_remap_external
                semaphore_create
                semaphore_destroy
                task_get_special_port_from_user
                task_info_from_user
                task_policy_set
                task_restartable_ranges_synchronize
                task_threads_from_user
                thread_get_state_to_user
                thread_info
                thread_policy
                thread_policy_set
                thread_resume
                thread_set_exception_ports
                thread_suspend
                )
            )
        )
    )
)

(if (and (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES") (defined? 'syscall-mach))
    (deny syscall-mach (with telemetry))
)

(if (and (equal? (param "ENABLE_SANDBOX_MESSAGE_FILTER") "YES") (defined? 'syscall-mach))
    (allow syscall-mach (machtrap-number
        MSC__kernelrpc_mach_port_allocate_trap
        MSC__kernelrpc_mach_port_construct_trap
        MSC__kernelrpc_mach_port_deallocate_trap
        MSC__kernelrpc_mach_port_destruct_trap
        MSC__kernelrpc_mach_port_extract_member_trap
        MSC__kernelrpc_mach_port_get_attributes_trap
        MSC__kernelrpc_mach_port_guard_trap
        MSC__kernelrpc_mach_port_insert_member_trap
        MSC__kernelrpc_mach_port_insert_right_trap
        MSC__kernelrpc_mach_port_mod_refs_trap
        MSC__kernelrpc_mach_port_request_notification_trap
        MSC__kernelrpc_mach_port_type_trap
        MSC__kernelrpc_mach_port_unguard_trap
        MSC__kernelrpc_mach_vm_allocate_trap
        MSC__kernelrpc_mach_vm_deallocate_trap
        MSC__kernelrpc_mach_vm_map_trap
        MSC__kernelrpc_mach_vm_protect_trap
        MSC__kernelrpc_mach_vm_purgable_control_trap
        MSC_host_create_mach_voucher_trap
        MSC_host_self_trap
        MSC_mach_generate_activity_id
        MSC_mach_msg_trap
        MSC_mach_msg_overwrite_trap
        MSC_mach_reply_port
        MSC_mach_voucher_extract_attr_recipe_trap
        MSC_mk_timer_arm
        MSC_mk_timer_cancel
        MSC_mk_timer_create
        MSC_mk_timer_destroy
        MSC_pid_for_task
        MSC_semaphore_signal_trap
        MSC_semaphore_timedwait_trap
        MSC_semaphore_wait_trap
        MSC_swtch_pri
        MSC_syscall_thread_switch
        MSC_task_name_for_pid
        MSC_thread_get_special_reply_port
        MSC_thread_self_trap
        )
    )
)





(allow iokit-open (with report)

    (with telemetry)

    (require-all
        (require-not (extension "com.apple.webkit.extension.iokit"))
        (iokit-registry-entry-class
            "AppleAVDUserClient"
            "AppleIntelMEUserClient"
            "AppleSNBFBUserClient"
        )
    )
)



(allow iokit-open (with report)

    (with telemetry)

    (require-all
        (require-not (extension "com.apple.webkit.extension.iokit"))
        (iokit-user-client-class
            "RootDomainUserClient"
        )
    )
)


(when (defined? 'darwin-notification-post)
    (allow darwin-notification-post (with telemetry))
)
